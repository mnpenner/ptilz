<?php namespace Ptilz\ProgExec;
use Ptilz\Arr;


/**
 * @property-read StreamWriter $stdin
 * @property-read StreamReader $stdout
 * @property-read StreamReader $stderr
 */
class Process {
    /** @var resource|null */
    private $proc;
    /** @var StreamWriter */
    private $stdin;
    /** @var StreamReader */
    private $stdout;
    /** @var StreamReader */
    private $stderr;

    /**
     * @param string $cmd The command to execute
     * @param array $options
     *  - cwd: The initial working dir for the command. This must be an absolute directory path, or NULL if you want to use the default value (the working dir of the current PHP process)
     *  - env: An array with the environment variables for the command that will be run, or NULL to use the same environment as the current PHP process
     *  - suppress_errors (windows only): suppresses errors generated by this function when it's set to TRUE
     *  - bypass_shell (windows only): bypass cmd.exe shell when set to TRUE
     */
    public function __construct($cmd, $options=[]) {
        $cwd = Arr::pop($options, 'cwd', null);
        $env = Arr::pop($options, 'env', null);
        $this->proc = proc_open($cmd, [
            0 => ['pipe', 'r'],
            1 => ['pipe', 'w'],
            2 => ['pipe', 'w'],
        ], $pipes, $cwd, $env, $options);
        $this->stdin = new StreamWriter($pipes[0]);
        $this->stdout = new StreamReader($pipes[1]);
        $this->stderr = new StreamReader($pipes[2]);
    }

    function __get($name) {
        switch($name) {
            case 'stdin': return $this->stdin;
            case 'stdout': return $this->stdout;
            case 'stderr': return $this->stderr;
        }
        trigger_error("Invalid property: " . __CLASS__ . "->$name");
        return null;
    }

    /**
     * Close a process opened by proc_open() and return the exit code of that process.
     *
     * @return int Returns the termination status of the process that was run. In case of an error then -1 is returned.
     */
    public function close() {
        if($this->proc) {
            unset($this->stdin, $this->stdout, $this->stderr);
            $ret = proc_close($this->proc);
            unset($this->proc);
            return $ret;
        }
        return -1;
    }

    function __destruct() {
        $this->close();
    }


}